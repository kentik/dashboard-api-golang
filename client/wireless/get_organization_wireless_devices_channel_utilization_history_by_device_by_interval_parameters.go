// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams creates a new GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams() *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	return &GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParamsWithTimeout creates a new GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParamsWithTimeout(timeout time.Duration) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	return &GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams{
		timeout: timeout,
	}
}

// NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParamsWithContext creates a new GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams object
// with the ability to set a context for a request.
func NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParamsWithContext(ctx context.Context) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	return &GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams{
		Context: ctx,
	}
}

// NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParamsWithHTTPClient creates a new GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParamsWithHTTPClient(client *http.Client) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	return &GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams{
		HTTPClient: client,
	}
}

/*
GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams contains all the parameters to send to the API endpoint

	for the get organization wireless devices channel utilization history by device by interval operation.

	Typically these are written to a http.Request.
*/
type GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams struct {

	/* EndingBefore.

	   A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	EndingBefore *string

	/* Interval.

	   The time interval in seconds for returned data. The valid intervals are: 300, 600, 3600, 7200, 14400, 21600. The default is 3600.
	*/
	Interval *int64

	/* NetworkIds.

	   Filter results by network.
	*/
	NetworkIds []string

	/* OrganizationID.

	   Organization ID
	*/
	OrganizationID string

	/* PerPage.

	   The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	*/
	PerPage *int64

	/* Serials.

	   Filter results by device.
	*/
	Serials []string

	/* StartingAfter.

	   A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	StartingAfter *string

	/* T0.

	   The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
	*/
	T0 *string

	/* T1.

	   The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
	*/
	T1 *string

	/* Timespan.

	   The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.

	   Format: float
	*/
	Timespan *float32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization wireless devices channel utilization history by device by interval params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithDefaults() *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization wireless devices channel utilization history by device by interval params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithTimeout(timeout time.Duration) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithContext(ctx context.Context) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithHTTPClient(client *http.Client) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndingBefore adds the endingBefore to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithEndingBefore(endingBefore *string) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetEndingBefore(endingBefore)
	return o
}

// SetEndingBefore adds the endingBefore to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetEndingBefore(endingBefore *string) {
	o.EndingBefore = endingBefore
}

// WithInterval adds the interval to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithInterval(interval *int64) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetInterval(interval *int64) {
	o.Interval = interval
}

// WithNetworkIds adds the networkIds to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithNetworkIds(networkIds []string) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetNetworkIds(networkIds)
	return o
}

// SetNetworkIds adds the networkIds to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetNetworkIds(networkIds []string) {
	o.NetworkIds = networkIds
}

// WithOrganizationID adds the organizationID to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithOrganizationID(organizationID string) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithPerPage adds the perPage to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithPerPage(perPage *int64) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSerials adds the serials to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithSerials(serials []string) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetSerials(serials)
	return o
}

// SetSerials adds the serials to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetSerials(serials []string) {
	o.Serials = serials
}

// WithStartingAfter adds the startingAfter to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithStartingAfter(startingAfter *string) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetStartingAfter(startingAfter)
	return o
}

// SetStartingAfter adds the startingAfter to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetStartingAfter(startingAfter *string) {
	o.StartingAfter = startingAfter
}

// WithT0 adds the t0 to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithT0(t0 *string) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetT0(t0)
	return o
}

// SetT0 adds the t0 to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetT0(t0 *string) {
	o.T0 = t0
}

// WithT1 adds the t1 to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithT1(t1 *string) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetT1(t1)
	return o
}

// SetT1 adds the t1 to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetT1(t1 *string) {
	o.T1 = t1
}

// WithTimespan adds the timespan to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WithTimespan(timespan *float32) *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get organization wireless devices channel utilization history by device by interval params
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) SetTimespan(timespan *float32) {
	o.Timespan = timespan
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndingBefore != nil {

		// query param endingBefore
		var qrEndingBefore string

		if o.EndingBefore != nil {
			qrEndingBefore = *o.EndingBefore
		}
		qEndingBefore := qrEndingBefore
		if qEndingBefore != "" {

			if err := r.SetQueryParam("endingBefore", qEndingBefore); err != nil {
				return err
			}
		}
	}

	if o.Interval != nil {

		// query param interval
		var qrInterval int64

		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := swag.FormatInt64(qrInterval)
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.NetworkIds != nil {

		// binding items for networkIds
		joinedNetworkIds := o.bindParamNetworkIds(reg)

		// query array param networkIds
		if err := r.SetQueryParam("networkIds", joinedNetworkIds...); err != nil {
			return err
		}
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Serials != nil {

		// binding items for serials
		joinedSerials := o.bindParamSerials(reg)

		// query array param serials
		if err := r.SetQueryParam("serials", joinedSerials...); err != nil {
			return err
		}
	}

	if o.StartingAfter != nil {

		// query param startingAfter
		var qrStartingAfter string

		if o.StartingAfter != nil {
			qrStartingAfter = *o.StartingAfter
		}
		qStartingAfter := qrStartingAfter
		if qStartingAfter != "" {

			if err := r.SetQueryParam("startingAfter", qStartingAfter); err != nil {
				return err
			}
		}
	}

	if o.T0 != nil {

		// query param t0
		var qrT0 string

		if o.T0 != nil {
			qrT0 = *o.T0
		}
		qT0 := qrT0
		if qT0 != "" {

			if err := r.SetQueryParam("t0", qT0); err != nil {
				return err
			}
		}
	}

	if o.T1 != nil {

		// query param t1
		var qrT1 string

		if o.T1 != nil {
			qrT1 = *o.T1
		}
		qT1 := qrT1
		if qT1 != "" {

			if err := r.SetQueryParam("t1", qT1); err != nil {
				return err
			}
		}
	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan float32

		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatFloat32(qrTimespan)
		if qTimespan != "" {

			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval binds the parameter networkIds
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) bindParamNetworkIds(formats strfmt.Registry) []string {
	networkIdsIR := o.NetworkIds

	var networkIdsIC []string
	for _, networkIdsIIR := range networkIdsIR { // explode []string

		networkIdsIIV := networkIdsIIR // string as string
		networkIdsIC = append(networkIdsIC, networkIdsIIV)
	}

	// items.CollectionFormat: ""
	networkIdsIS := swag.JoinByFormat(networkIdsIC, "")

	return networkIdsIS
}

// bindParamGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval binds the parameter serials
func (o *GetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalParams) bindParamSerials(formats strfmt.Registry) []string {
	serialsIR := o.Serials

	var serialsIC []string
	for _, serialsIIR := range serialsIR { // explode []string

		serialsIIV := serialsIIR // string as string
		serialsIC = append(serialsIC, serialsIIV)
	}

	// items.CollectionFormat: ""
	serialsIS := swag.JoinByFormat(serialsIC, "")

	return serialsIS
}

// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetDeviceWirelessStatusReader is a Reader for the GetDeviceWirelessStatus structure.
type GetDeviceWirelessStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceWirelessStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceWirelessStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /devices/{serial}/wireless/status] getDeviceWirelessStatus", response, response.Code())
	}
}

// NewGetDeviceWirelessStatusOK creates a GetDeviceWirelessStatusOK with default headers values
func NewGetDeviceWirelessStatusOK() *GetDeviceWirelessStatusOK {
	return &GetDeviceWirelessStatusOK{}
}

/*
GetDeviceWirelessStatusOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetDeviceWirelessStatusOK struct {
	Payload *GetDeviceWirelessStatusOKBody
}

// IsSuccess returns true when this get device wireless status o k response has a 2xx status code
func (o *GetDeviceWirelessStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get device wireless status o k response has a 3xx status code
func (o *GetDeviceWirelessStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device wireless status o k response has a 4xx status code
func (o *GetDeviceWirelessStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device wireless status o k response has a 5xx status code
func (o *GetDeviceWirelessStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get device wireless status o k response a status code equal to that given
func (o *GetDeviceWirelessStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get device wireless status o k response
func (o *GetDeviceWirelessStatusOK) Code() int {
	return 200
}

func (o *GetDeviceWirelessStatusOK) Error() string {
	return fmt.Sprintf("[GET /devices/{serial}/wireless/status][%d] getDeviceWirelessStatusOK  %+v", 200, o.Payload)
}

func (o *GetDeviceWirelessStatusOK) String() string {
	return fmt.Sprintf("[GET /devices/{serial}/wireless/status][%d] getDeviceWirelessStatusOK  %+v", 200, o.Payload)
}

func (o *GetDeviceWirelessStatusOK) GetPayload() *GetDeviceWirelessStatusOKBody {
	return o.Payload
}

func (o *GetDeviceWirelessStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceWirelessStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDeviceWirelessStatusOKBody get device wireless status o k body
swagger:model GetDeviceWirelessStatusOKBody
*/
type GetDeviceWirelessStatusOKBody struct {

	// SSID status list
	BasicServiceSets []*GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0 `json:"basicServiceSets"`
}

// Validate validates this get device wireless status o k body
func (o *GetDeviceWirelessStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBasicServiceSets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceWirelessStatusOKBody) validateBasicServiceSets(formats strfmt.Registry) error {
	if swag.IsZero(o.BasicServiceSets) { // not required
		return nil
	}

	for i := 0; i < len(o.BasicServiceSets); i++ {
		if swag.IsZero(o.BasicServiceSets[i]) { // not required
			continue
		}

		if o.BasicServiceSets[i] != nil {
			if err := o.BasicServiceSets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDeviceWirelessStatusOK" + "." + "basicServiceSets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDeviceWirelessStatusOK" + "." + "basicServiceSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get device wireless status o k body based on the context it is used
func (o *GetDeviceWirelessStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBasicServiceSets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceWirelessStatusOKBody) contextValidateBasicServiceSets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.BasicServiceSets); i++ {

		if o.BasicServiceSets[i] != nil {

			if swag.IsZero(o.BasicServiceSets[i]) { // not required
				return nil
			}

			if err := o.BasicServiceSets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDeviceWirelessStatusOK" + "." + "basicServiceSets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDeviceWirelessStatusOK" + "." + "basicServiceSets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceWirelessStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceWirelessStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceWirelessStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0 get device wireless status o k body basic service sets items0
swagger:model GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0
*/
type GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0 struct {

	// Frequency range used by wireless network
	Band string `json:"band,omitempty"`

	// Whether the SSID is broadcasting based on an availability schedule
	Broadcasting bool `json:"broadcasting,omitempty"`

	// Unique identifier of wireless access point
	Bssid string `json:"bssid,omitempty"`

	// Frequency channel used by wireless network
	Channel int64 `json:"channel,omitempty"`

	// Width of frequency channel used by wireless network
	ChannelWidth string `json:"channelWidth,omitempty"`

	// Status of wireless network
	Enabled bool `json:"enabled,omitempty"`

	// Strength of wireless signal
	Power string `json:"power,omitempty"`

	// Name of wireless network
	SsidName string `json:"ssidName,omitempty"`

	// Unique identifier of wireless network
	SsidNumber int64 `json:"ssidNumber,omitempty"`

	// Whether the SSID is advertised or hidden
	Visible bool `json:"visible,omitempty"`
}

// Validate validates this get device wireless status o k body basic service sets items0
func (o *GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device wireless status o k body basic service sets items0 based on context it is used
func (o *GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0) UnmarshalBinary(b []byte) error {
	var res GetDeviceWirelessStatusOKBodyBasicServiceSetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RebootDeviceReader is a Reader for the RebootDevice structure.
type RebootDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RebootDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRebootDeviceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /devices/{serial}/reboot] rebootDevice", response, response.Code())
	}
}

// NewRebootDeviceAccepted creates a RebootDeviceAccepted with default headers values
func NewRebootDeviceAccepted() *RebootDeviceAccepted {
	return &RebootDeviceAccepted{}
}

/*
RebootDeviceAccepted describes a response with status code 202, with default header values.

Successful operation
*/
type RebootDeviceAccepted struct {
	Payload *RebootDeviceAcceptedBody
}

// IsSuccess returns true when this reboot device accepted response has a 2xx status code
func (o *RebootDeviceAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reboot device accepted response has a 3xx status code
func (o *RebootDeviceAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reboot device accepted response has a 4xx status code
func (o *RebootDeviceAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this reboot device accepted response has a 5xx status code
func (o *RebootDeviceAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this reboot device accepted response a status code equal to that given
func (o *RebootDeviceAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the reboot device accepted response
func (o *RebootDeviceAccepted) Code() int {
	return 202
}

func (o *RebootDeviceAccepted) Error() string {
	return fmt.Sprintf("[POST /devices/{serial}/reboot][%d] rebootDeviceAccepted  %+v", 202, o.Payload)
}

func (o *RebootDeviceAccepted) String() string {
	return fmt.Sprintf("[POST /devices/{serial}/reboot][%d] rebootDeviceAccepted  %+v", 202, o.Payload)
}

func (o *RebootDeviceAccepted) GetPayload() *RebootDeviceAcceptedBody {
	return o.Payload
}

func (o *RebootDeviceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RebootDeviceAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
RebootDeviceAcceptedBody reboot device accepted body
swagger:model RebootDeviceAcceptedBody
*/
type RebootDeviceAcceptedBody struct {

	// Shows the success of the reboot
	Success bool `json:"success,omitempty"`
}

// Validate validates this reboot device accepted body
func (o *RebootDeviceAcceptedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this reboot device accepted body based on context it is used
func (o *RebootDeviceAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RebootDeviceAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RebootDeviceAcceptedBody) UnmarshalBinary(b []byte) error {
	var res RebootDeviceAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

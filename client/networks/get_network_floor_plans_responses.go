// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkFloorPlansReader is a Reader for the GetNetworkFloorPlans structure.
type GetNetworkFloorPlansReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkFloorPlansReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkFloorPlansOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /networks/{networkId}/floorPlans] getNetworkFloorPlans", response, response.Code())
	}
}

// NewGetNetworkFloorPlansOK creates a GetNetworkFloorPlansOK with default headers values
func NewGetNetworkFloorPlansOK() *GetNetworkFloorPlansOK {
	return &GetNetworkFloorPlansOK{}
}

/*
GetNetworkFloorPlansOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkFloorPlansOK struct {
	Payload []*GetNetworkFloorPlansOKBodyItems0
}

// IsSuccess returns true when this get network floor plans o k response has a 2xx status code
func (o *GetNetworkFloorPlansOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network floor plans o k response has a 3xx status code
func (o *GetNetworkFloorPlansOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network floor plans o k response has a 4xx status code
func (o *GetNetworkFloorPlansOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network floor plans o k response has a 5xx status code
func (o *GetNetworkFloorPlansOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network floor plans o k response a status code equal to that given
func (o *GetNetworkFloorPlansOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network floor plans o k response
func (o *GetNetworkFloorPlansOK) Code() int {
	return 200
}

func (o *GetNetworkFloorPlansOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/floorPlans][%d] getNetworkFloorPlansOK  %+v", 200, o.Payload)
}

func (o *GetNetworkFloorPlansOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/floorPlans][%d] getNetworkFloorPlansOK  %+v", 200, o.Payload)
}

func (o *GetNetworkFloorPlansOK) GetPayload() []*GetNetworkFloorPlansOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkFloorPlansOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkFloorPlansOKBodyItems0 get network floor plans o k body items0
swagger:model GetNetworkFloorPlansOKBodyItems0
*/
type GetNetworkFloorPlansOKBodyItems0 struct {

	// bottom left corner
	BottomLeftCorner *GetNetworkFloorPlansOKBodyItems0BottomLeftCorner `json:"bottomLeftCorner,omitempty"`

	// bottom right corner
	BottomRightCorner *GetNetworkFloorPlansOKBodyItems0BottomRightCorner `json:"bottomRightCorner,omitempty"`

	// center
	Center *GetNetworkFloorPlansOKBodyItems0Center `json:"center,omitempty"`

	// List of devices for the floorplan
	Devices []*GetNetworkFloorPlansOKBodyItems0DevicesItems0 `json:"devices"`

	// Floor plan ID
	FloorPlanID string `json:"floorPlanId,omitempty"`

	// The height of your floor plan.
	Height float32 `json:"height,omitempty"`

	// The format type of the image.
	ImageExtension string `json:"imageExtension,omitempty"`

	// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
	// Format: byte
	ImageMd5 strfmt.Base64 `json:"imageMd5,omitempty"`

	// The url link for the floor plan image.
	ImageURL string `json:"imageUrl,omitempty"`

	// The time the image url link will expire.
	ImageURLExpiresAt string `json:"imageUrlExpiresAt,omitempty"`

	// The name of your floor plan.
	Name string `json:"name,omitempty"`

	// top left corner
	TopLeftCorner *GetNetworkFloorPlansOKBodyItems0TopLeftCorner `json:"topLeftCorner,omitempty"`

	// top right corner
	TopRightCorner *GetNetworkFloorPlansOKBodyItems0TopRightCorner `json:"topRightCorner,omitempty"`

	// The width of your floor plan.
	Width float32 `json:"width,omitempty"`
}

// Validate validates this get network floor plans o k body items0
func (o *GetNetworkFloorPlansOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBottomLeftCorner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBottomRightCorner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTopLeftCorner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTopRightCorner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) validateBottomLeftCorner(formats strfmt.Registry) error {
	if swag.IsZero(o.BottomLeftCorner) { // not required
		return nil
	}

	if o.BottomLeftCorner != nil {
		if err := o.BottomLeftCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bottomLeftCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bottomLeftCorner")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) validateBottomRightCorner(formats strfmt.Registry) error {
	if swag.IsZero(o.BottomRightCorner) { // not required
		return nil
	}

	if o.BottomRightCorner != nil {
		if err := o.BottomRightCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bottomRightCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bottomRightCorner")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) validateCenter(formats strfmt.Registry) error {
	if swag.IsZero(o.Center) { // not required
		return nil
	}

	if o.Center != nil {
		if err := o.Center.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("center")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("center")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(o.Devices) { // not required
		return nil
	}

	for i := 0; i < len(o.Devices); i++ {
		if swag.IsZero(o.Devices[i]) { // not required
			continue
		}

		if o.Devices[i] != nil {
			if err := o.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) validateTopLeftCorner(formats strfmt.Registry) error {
	if swag.IsZero(o.TopLeftCorner) { // not required
		return nil
	}

	if o.TopLeftCorner != nil {
		if err := o.TopLeftCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topLeftCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topLeftCorner")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) validateTopRightCorner(formats strfmt.Registry) error {
	if swag.IsZero(o.TopRightCorner) { // not required
		return nil
	}

	if o.TopRightCorner != nil {
		if err := o.TopRightCorner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topRightCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topRightCorner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network floor plans o k body items0 based on the context it is used
func (o *GetNetworkFloorPlansOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBottomLeftCorner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBottomRightCorner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCenter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTopLeftCorner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTopRightCorner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) contextValidateBottomLeftCorner(ctx context.Context, formats strfmt.Registry) error {

	if o.BottomLeftCorner != nil {

		if swag.IsZero(o.BottomLeftCorner) { // not required
			return nil
		}

		if err := o.BottomLeftCorner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bottomLeftCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bottomLeftCorner")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) contextValidateBottomRightCorner(ctx context.Context, formats strfmt.Registry) error {

	if o.BottomRightCorner != nil {

		if swag.IsZero(o.BottomRightCorner) { // not required
			return nil
		}

		if err := o.BottomRightCorner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bottomRightCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bottomRightCorner")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) contextValidateCenter(ctx context.Context, formats strfmt.Registry) error {

	if o.Center != nil {

		if swag.IsZero(o.Center) { // not required
			return nil
		}

		if err := o.Center.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("center")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("center")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Devices); i++ {

		if o.Devices[i] != nil {

			if swag.IsZero(o.Devices[i]) { // not required
				return nil
			}

			if err := o.Devices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) contextValidateTopLeftCorner(ctx context.Context, formats strfmt.Registry) error {

	if o.TopLeftCorner != nil {

		if swag.IsZero(o.TopLeftCorner) { // not required
			return nil
		}

		if err := o.TopLeftCorner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topLeftCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topLeftCorner")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkFloorPlansOKBodyItems0) contextValidateTopRightCorner(ctx context.Context, formats strfmt.Registry) error {

	if o.TopRightCorner != nil {

		if swag.IsZero(o.TopRightCorner) { // not required
			return nil
		}

		if err := o.TopRightCorner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topRightCorner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topRightCorner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkFloorPlansOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkFloorPlansOKBodyItems0BottomLeftCorner The longitude and latitude of the bottom left corner of your floor plan.
swagger:model GetNetworkFloorPlansOKBodyItems0BottomLeftCorner
*/
type GetNetworkFloorPlansOKBodyItems0BottomLeftCorner struct {

	// Latitude
	Lat float32 `json:"lat,omitempty"`

	// Longitude
	Lng float32 `json:"lng,omitempty"`
}

// Validate validates this get network floor plans o k body items0 bottom left corner
func (o *GetNetworkFloorPlansOKBodyItems0BottomLeftCorner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network floor plans o k body items0 bottom left corner based on context it is used
func (o *GetNetworkFloorPlansOKBodyItems0BottomLeftCorner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0BottomLeftCorner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0BottomLeftCorner) UnmarshalBinary(b []byte) error {
	var res GetNetworkFloorPlansOKBodyItems0BottomLeftCorner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkFloorPlansOKBodyItems0BottomRightCorner The longitude and latitude of the bottom right corner of your floor plan.
swagger:model GetNetworkFloorPlansOKBodyItems0BottomRightCorner
*/
type GetNetworkFloorPlansOKBodyItems0BottomRightCorner struct {

	// Latitude
	Lat float32 `json:"lat,omitempty"`

	// Longitude
	Lng float32 `json:"lng,omitempty"`
}

// Validate validates this get network floor plans o k body items0 bottom right corner
func (o *GetNetworkFloorPlansOKBodyItems0BottomRightCorner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network floor plans o k body items0 bottom right corner based on context it is used
func (o *GetNetworkFloorPlansOKBodyItems0BottomRightCorner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0BottomRightCorner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0BottomRightCorner) UnmarshalBinary(b []byte) error {
	var res GetNetworkFloorPlansOKBodyItems0BottomRightCorner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkFloorPlansOKBodyItems0Center The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
swagger:model GetNetworkFloorPlansOKBodyItems0Center
*/
type GetNetworkFloorPlansOKBodyItems0Center struct {

	// Latitude
	Lat float32 `json:"lat,omitempty"`

	// Longitude
	Lng float32 `json:"lng,omitempty"`
}

// Validate validates this get network floor plans o k body items0 center
func (o *GetNetworkFloorPlansOKBodyItems0Center) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network floor plans o k body items0 center based on context it is used
func (o *GetNetworkFloorPlansOKBodyItems0Center) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0Center) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0Center) UnmarshalBinary(b []byte) error {
	var res GetNetworkFloorPlansOKBodyItems0Center
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkFloorPlansOKBodyItems0DevicesItems0 get network floor plans o k body items0 devices items0
swagger:model GetNetworkFloorPlansOKBodyItems0DevicesItems0
*/
type GetNetworkFloorPlansOKBodyItems0DevicesItems0 struct {

	// Physical address of the device
	Address string `json:"address,omitempty"`

	// Firmware version of the device
	Firmware string `json:"firmware,omitempty"`

	// LAN IP address of the device
	LanIP string `json:"lanIp,omitempty"`

	// Latitude of the device
	Lat float32 `json:"lat,omitempty"`

	// Longitude of the device
	Lng float32 `json:"lng,omitempty"`

	// MAC address of the device
	Mac string `json:"mac,omitempty"`

	// Model of the device
	Model string `json:"model,omitempty"`

	// Name of the device
	Name string `json:"name,omitempty"`

	// ID of the network the device belongs to
	NetworkID string `json:"networkId,omitempty"`

	// Notes for the device, limited to 255 characters
	Notes string `json:"notes,omitempty"`

	// Product type of the device
	ProductType string `json:"productType,omitempty"`

	// Serial number of the device
	Serial string `json:"serial,omitempty"`

	// List of tags assigned to the device
	Tags []string `json:"tags"`
}

// Validate validates this get network floor plans o k body items0 devices items0
func (o *GetNetworkFloorPlansOKBodyItems0DevicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network floor plans o k body items0 devices items0 based on context it is used
func (o *GetNetworkFloorPlansOKBodyItems0DevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0DevicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0DevicesItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkFloorPlansOKBodyItems0DevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkFloorPlansOKBodyItems0TopLeftCorner The longitude and latitude of the top left corner of your floor plan.
swagger:model GetNetworkFloorPlansOKBodyItems0TopLeftCorner
*/
type GetNetworkFloorPlansOKBodyItems0TopLeftCorner struct {

	// Latitude
	Lat float32 `json:"lat,omitempty"`

	// Longitude
	Lng float32 `json:"lng,omitempty"`
}

// Validate validates this get network floor plans o k body items0 top left corner
func (o *GetNetworkFloorPlansOKBodyItems0TopLeftCorner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network floor plans o k body items0 top left corner based on context it is used
func (o *GetNetworkFloorPlansOKBodyItems0TopLeftCorner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0TopLeftCorner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0TopLeftCorner) UnmarshalBinary(b []byte) error {
	var res GetNetworkFloorPlansOKBodyItems0TopLeftCorner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkFloorPlansOKBodyItems0TopRightCorner The longitude and latitude of the top right corner of your floor plan.
swagger:model GetNetworkFloorPlansOKBodyItems0TopRightCorner
*/
type GetNetworkFloorPlansOKBodyItems0TopRightCorner struct {

	// Latitude
	Lat float32 `json:"lat,omitempty"`

	// Longitude
	Lng float32 `json:"lng,omitempty"`
}

// Validate validates this get network floor plans o k body items0 top right corner
func (o *GetNetworkFloorPlansOKBodyItems0TopRightCorner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network floor plans o k body items0 top right corner based on context it is used
func (o *GetNetworkFloorPlansOKBodyItems0TopRightCorner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0TopRightCorner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkFloorPlansOKBodyItems0TopRightCorner) UnmarshalBinary(b []byte) error {
	var res GetNetworkFloorPlansOKBodyItems0TopRightCorner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

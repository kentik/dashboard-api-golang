// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrganizationAdminReader is a Reader for the UpdateOrganizationAdmin structure.
type UpdateOrganizationAdminReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrganizationAdminReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrganizationAdminOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PUT /organizations/{organizationId}/admins/{adminId}] updateOrganizationAdmin", response, response.Code())
	}
}

// NewUpdateOrganizationAdminOK creates a UpdateOrganizationAdminOK with default headers values
func NewUpdateOrganizationAdminOK() *UpdateOrganizationAdminOK {
	return &UpdateOrganizationAdminOK{}
}

/*
UpdateOrganizationAdminOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateOrganizationAdminOK struct {
	Payload *UpdateOrganizationAdminOKBody
}

// IsSuccess returns true when this update organization admin o k response has a 2xx status code
func (o *UpdateOrganizationAdminOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update organization admin o k response has a 3xx status code
func (o *UpdateOrganizationAdminOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update organization admin o k response has a 4xx status code
func (o *UpdateOrganizationAdminOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update organization admin o k response has a 5xx status code
func (o *UpdateOrganizationAdminOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update organization admin o k response a status code equal to that given
func (o *UpdateOrganizationAdminOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update organization admin o k response
func (o *UpdateOrganizationAdminOK) Code() int {
	return 200
}

func (o *UpdateOrganizationAdminOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organizationId}/admins/{adminId}][%d] updateOrganizationAdminOK  %+v", 200, o.Payload)
}

func (o *UpdateOrganizationAdminOK) String() string {
	return fmt.Sprintf("[PUT /organizations/{organizationId}/admins/{adminId}][%d] updateOrganizationAdminOK  %+v", 200, o.Payload)
}

func (o *UpdateOrganizationAdminOK) GetPayload() *UpdateOrganizationAdminOKBody {
	return o.Payload
}

func (o *UpdateOrganizationAdminOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateOrganizationAdminOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateOrganizationAdminBody update organization admin body
// Example: {"name":"Miles Meraki","networks":[{"access":"full","id":"N_24329156"}],"orgAccess":"none","tags":[{"access":"read-only","tag":"west"}]}
swagger:model UpdateOrganizationAdminBody
*/
type UpdateOrganizationAdminBody struct {

	// The name of the dashboard administrator
	Name string `json:"name,omitempty"`

	// The list of networks that the dashboard administrator has privileges on
	Networks []*UpdateOrganizationAdminParamsBodyNetworksItems0 `json:"networks"`

	// The privilege of the dashboard administrator on the organization. Can be one of 'full', 'read-only', 'enterprise' or 'none'
	// Enum: [enterprise full none read-only]
	OrgAccess string `json:"orgAccess,omitempty"`

	// The list of tags that the dashboard administrator has privileges on
	Tags []*UpdateOrganizationAdminParamsBodyTagsItems0 `json:"tags"`
}

// Validate validates this update organization admin body
func (o *UpdateOrganizationAdminBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrgAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationAdminBody) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(o.Networks) { // not required
		return nil
	}

	for i := 0; i < len(o.Networks); i++ {
		if swag.IsZero(o.Networks[i]) { // not required
			continue
		}

		if o.Networks[i] != nil {
			if err := o.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateOrganizationAdminBodyTypeOrgAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enterprise","full","none","read-only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdminBodyTypeOrgAccessPropEnum = append(updateOrganizationAdminBodyTypeOrgAccessPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdminBodyOrgAccessEnterprise captures enum value "enterprise"
	UpdateOrganizationAdminBodyOrgAccessEnterprise string = "enterprise"

	// UpdateOrganizationAdminBodyOrgAccessFull captures enum value "full"
	UpdateOrganizationAdminBodyOrgAccessFull string = "full"

	// UpdateOrganizationAdminBodyOrgAccessNone captures enum value "none"
	UpdateOrganizationAdminBodyOrgAccessNone string = "none"

	// UpdateOrganizationAdminBodyOrgAccessReadDashOnly captures enum value "read-only"
	UpdateOrganizationAdminBodyOrgAccessReadDashOnly string = "read-only"
)

// prop value enum
func (o *UpdateOrganizationAdminBody) validateOrgAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdminBodyTypeOrgAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdminBody) validateOrgAccess(formats strfmt.Registry) error {
	if swag.IsZero(o.OrgAccess) { // not required
		return nil
	}

	// value enum
	if err := o.validateOrgAccessEnum("updateOrganizationAdmin"+"."+"orgAccess", "body", o.OrgAccess); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationAdminBody) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	for i := 0; i < len(o.Tags); i++ {
		if swag.IsZero(o.Tags[i]) { // not required
			continue
		}

		if o.Tags[i] != nil {
			if err := o.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update organization admin body based on the context it is used
func (o *UpdateOrganizationAdminBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationAdminBody) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Networks); i++ {

		if o.Networks[i] != nil {

			if swag.IsZero(o.Networks[i]) { // not required
				return nil
			}

			if err := o.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateOrganizationAdminBody) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tags); i++ {

		if o.Tags[i] != nil {

			if swag.IsZero(o.Tags[i]) { // not required
				return nil
			}

			if err := o.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdminBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdminBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdminBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateOrganizationAdminOKBody update organization admin o k body
swagger:model UpdateOrganizationAdminOKBody
*/
type UpdateOrganizationAdminOKBody struct {

	// Status of the admin's account
	// Enum: [locked ok pending unverified]
	AccountStatus string `json:"accountStatus,omitempty"`

	// Admin's authentication method
	// Enum: [Cisco SecureX Sign-On Email]
	AuthenticationMethod string `json:"authenticationMethod,omitempty"`

	// Admin's email address
	Email string `json:"email,omitempty"`

	// Indicates whether the admin has an API key
	HasAPIKey bool `json:"hasApiKey,omitempty"`

	// Admin's ID
	ID string `json:"id,omitempty"`

	// Time when the admin was last active
	// Format: date-time
	LastActive strfmt.DateTime `json:"lastActive,omitempty"`

	// Admin's username
	Name string `json:"name,omitempty"`

	// Admin network access information
	Networks []*UpdateOrganizationAdminOKBodyNetworksItems0 `json:"networks"`

	// Admin's level of access to the organization
	// Enum: [enterprise full none read-only]
	OrgAccess string `json:"orgAccess,omitempty"`

	// Admin tag information
	Tags []*UpdateOrganizationAdminOKBodyTagsItems0 `json:"tags"`

	// Indicates whether two-factor authentication is enabled
	TwoFactorAuthEnabled bool `json:"twoFactorAuthEnabled,omitempty"`
}

// Validate validates this update organization admin o k body
func (o *UpdateOrganizationAdminOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastActive(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrgAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrganizationAdminOKBodyTypeAccountStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["locked","ok","pending","unverified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdminOKBodyTypeAccountStatusPropEnum = append(updateOrganizationAdminOKBodyTypeAccountStatusPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdminOKBodyAccountStatusLocked captures enum value "locked"
	UpdateOrganizationAdminOKBodyAccountStatusLocked string = "locked"

	// UpdateOrganizationAdminOKBodyAccountStatusOk captures enum value "ok"
	UpdateOrganizationAdminOKBodyAccountStatusOk string = "ok"

	// UpdateOrganizationAdminOKBodyAccountStatusPending captures enum value "pending"
	UpdateOrganizationAdminOKBodyAccountStatusPending string = "pending"

	// UpdateOrganizationAdminOKBodyAccountStatusUnverified captures enum value "unverified"
	UpdateOrganizationAdminOKBodyAccountStatusUnverified string = "unverified"
)

// prop value enum
func (o *UpdateOrganizationAdminOKBody) validateAccountStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdminOKBodyTypeAccountStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdminOKBody) validateAccountStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.AccountStatus) { // not required
		return nil
	}

	// value enum
	if err := o.validateAccountStatusEnum("updateOrganizationAdminOK"+"."+"accountStatus", "body", o.AccountStatus); err != nil {
		return err
	}

	return nil
}

var updateOrganizationAdminOKBodyTypeAuthenticationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Cisco SecureX Sign-On","Email"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdminOKBodyTypeAuthenticationMethodPropEnum = append(updateOrganizationAdminOKBodyTypeAuthenticationMethodPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdminOKBodyAuthenticationMethodCiscoSecureXSignDashOn captures enum value "Cisco SecureX Sign-On"
	UpdateOrganizationAdminOKBodyAuthenticationMethodCiscoSecureXSignDashOn string = "Cisco SecureX Sign-On"

	// UpdateOrganizationAdminOKBodyAuthenticationMethodEmail captures enum value "Email"
	UpdateOrganizationAdminOKBodyAuthenticationMethodEmail string = "Email"
)

// prop value enum
func (o *UpdateOrganizationAdminOKBody) validateAuthenticationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdminOKBodyTypeAuthenticationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdminOKBody) validateAuthenticationMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationMethod) { // not required
		return nil
	}

	// value enum
	if err := o.validateAuthenticationMethodEnum("updateOrganizationAdminOK"+"."+"authenticationMethod", "body", o.AuthenticationMethod); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationAdminOKBody) validateLastActive(formats strfmt.Registry) error {
	if swag.IsZero(o.LastActive) { // not required
		return nil
	}

	if err := validate.FormatOf("updateOrganizationAdminOK"+"."+"lastActive", "body", "date-time", o.LastActive.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationAdminOKBody) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(o.Networks) { // not required
		return nil
	}

	for i := 0; i < len(o.Networks); i++ {
		if swag.IsZero(o.Networks[i]) { // not required
			continue
		}

		if o.Networks[i] != nil {
			if err := o.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdminOK" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdminOK" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateOrganizationAdminOKBodyTypeOrgAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enterprise","full","none","read-only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdminOKBodyTypeOrgAccessPropEnum = append(updateOrganizationAdminOKBodyTypeOrgAccessPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdminOKBodyOrgAccessEnterprise captures enum value "enterprise"
	UpdateOrganizationAdminOKBodyOrgAccessEnterprise string = "enterprise"

	// UpdateOrganizationAdminOKBodyOrgAccessFull captures enum value "full"
	UpdateOrganizationAdminOKBodyOrgAccessFull string = "full"

	// UpdateOrganizationAdminOKBodyOrgAccessNone captures enum value "none"
	UpdateOrganizationAdminOKBodyOrgAccessNone string = "none"

	// UpdateOrganizationAdminOKBodyOrgAccessReadDashOnly captures enum value "read-only"
	UpdateOrganizationAdminOKBodyOrgAccessReadDashOnly string = "read-only"
)

// prop value enum
func (o *UpdateOrganizationAdminOKBody) validateOrgAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdminOKBodyTypeOrgAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdminOKBody) validateOrgAccess(formats strfmt.Registry) error {
	if swag.IsZero(o.OrgAccess) { // not required
		return nil
	}

	// value enum
	if err := o.validateOrgAccessEnum("updateOrganizationAdminOK"+"."+"orgAccess", "body", o.OrgAccess); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationAdminOKBody) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	for i := 0; i < len(o.Tags); i++ {
		if swag.IsZero(o.Tags[i]) { // not required
			continue
		}

		if o.Tags[i] != nil {
			if err := o.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdminOK" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdminOK" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update organization admin o k body based on the context it is used
func (o *UpdateOrganizationAdminOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationAdminOKBody) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Networks); i++ {

		if o.Networks[i] != nil {

			if swag.IsZero(o.Networks[i]) { // not required
				return nil
			}

			if err := o.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdminOK" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdminOK" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateOrganizationAdminOKBody) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tags); i++ {

		if o.Tags[i] != nil {

			if swag.IsZero(o.Tags[i]) { // not required
				return nil
			}

			if err := o.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdminOK" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdminOK" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdminOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdminOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdminOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateOrganizationAdminOKBodyNetworksItems0 update organization admin o k body networks items0
swagger:model UpdateOrganizationAdminOKBodyNetworksItems0
*/
type UpdateOrganizationAdminOKBodyNetworksItems0 struct {

	// Admin's level of access to the network
	Access string `json:"access,omitempty"`

	// Network ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update organization admin o k body networks items0
func (o *UpdateOrganizationAdminOKBodyNetworksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update organization admin o k body networks items0 based on context it is used
func (o *UpdateOrganizationAdminOKBodyNetworksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdminOKBodyNetworksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdminOKBodyNetworksItems0) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdminOKBodyNetworksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateOrganizationAdminOKBodyTagsItems0 update organization admin o k body tags items0
swagger:model UpdateOrganizationAdminOKBodyTagsItems0
*/
type UpdateOrganizationAdminOKBodyTagsItems0 struct {

	// Access level for the tag
	Access string `json:"access,omitempty"`

	// Tag value
	Tag string `json:"tag,omitempty"`
}

// Validate validates this update organization admin o k body tags items0
func (o *UpdateOrganizationAdminOKBodyTagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update organization admin o k body tags items0 based on context it is used
func (o *UpdateOrganizationAdminOKBodyTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdminOKBodyTagsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdminOKBodyTagsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdminOKBodyTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateOrganizationAdminParamsBodyNetworksItems0 update organization admin params body networks items0
swagger:model UpdateOrganizationAdminParamsBodyNetworksItems0
*/
type UpdateOrganizationAdminParamsBodyNetworksItems0 struct {

	// The privilege of the dashboard administrator on the network. Can be one of 'full', 'read-only', 'guest-ambassador' or 'monitor-only'
	// Required: true
	Access *string `json:"access"`

	// The network ID
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this update organization admin params body networks items0
func (o *UpdateOrganizationAdminParamsBodyNetworksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationAdminParamsBodyNetworksItems0) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", o.Access); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationAdminParamsBodyNetworksItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update organization admin params body networks items0 based on context it is used
func (o *UpdateOrganizationAdminParamsBodyNetworksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdminParamsBodyNetworksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdminParamsBodyNetworksItems0) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdminParamsBodyNetworksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateOrganizationAdminParamsBodyTagsItems0 update organization admin params body tags items0
swagger:model UpdateOrganizationAdminParamsBodyTagsItems0
*/
type UpdateOrganizationAdminParamsBodyTagsItems0 struct {

	// The privilege of the dashboard administrator on the tag. Can be one of 'full', 'read-only', 'guest-ambassador' or 'monitor-only'
	// Required: true
	// Enum: [full guest-ambassador monitor-only read-only]
	Access *string `json:"access"`

	// The name of the tag
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this update organization admin params body tags items0
func (o *UpdateOrganizationAdminParamsBodyTagsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","guest-ambassador","monitor-only","read-only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum = append(updateOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdminParamsBodyTagsItems0AccessFull captures enum value "full"
	UpdateOrganizationAdminParamsBodyTagsItems0AccessFull string = "full"

	// UpdateOrganizationAdminParamsBodyTagsItems0AccessGuestDashAmbassador captures enum value "guest-ambassador"
	UpdateOrganizationAdminParamsBodyTagsItems0AccessGuestDashAmbassador string = "guest-ambassador"

	// UpdateOrganizationAdminParamsBodyTagsItems0AccessMonitorDashOnly captures enum value "monitor-only"
	UpdateOrganizationAdminParamsBodyTagsItems0AccessMonitorDashOnly string = "monitor-only"

	// UpdateOrganizationAdminParamsBodyTagsItems0AccessReadDashOnly captures enum value "read-only"
	UpdateOrganizationAdminParamsBodyTagsItems0AccessReadDashOnly string = "read-only"
)

// prop value enum
func (o *UpdateOrganizationAdminParamsBodyTagsItems0) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdminParamsBodyTagsItems0) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", o.Access); err != nil {
		return err
	}

	// value enum
	if err := o.validateAccessEnum("access", "body", *o.Access); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationAdminParamsBodyTagsItems0) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", o.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update organization admin params body tags items0 based on context it is used
func (o *UpdateOrganizationAdminParamsBodyTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdminParamsBodyTagsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdminParamsBodyTagsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdminParamsBodyTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

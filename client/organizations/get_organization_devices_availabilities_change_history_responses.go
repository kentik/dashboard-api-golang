// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationDevicesAvailabilitiesChangeHistoryReader is a Reader for the GetOrganizationDevicesAvailabilitiesChangeHistory structure.
type GetOrganizationDevicesAvailabilitiesChangeHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationDevicesAvailabilitiesChangeHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organizationId}/devices/availabilities/changeHistory] getOrganizationDevicesAvailabilitiesChangeHistory", response, response.Code())
	}
}

// NewGetOrganizationDevicesAvailabilitiesChangeHistoryOK creates a GetOrganizationDevicesAvailabilitiesChangeHistoryOK with default headers values
func NewGetOrganizationDevicesAvailabilitiesChangeHistoryOK() *GetOrganizationDevicesAvailabilitiesChangeHistoryOK {
	return &GetOrganizationDevicesAvailabilitiesChangeHistoryOK{}
}

/*
GetOrganizationDevicesAvailabilitiesChangeHistoryOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationDevicesAvailabilitiesChangeHistoryOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0
}

// IsSuccess returns true when this get organization devices availabilities change history o k response has a 2xx status code
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization devices availabilities change history o k response has a 3xx status code
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization devices availabilities change history o k response has a 4xx status code
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization devices availabilities change history o k response has a 5xx status code
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization devices availabilities change history o k response a status code equal to that given
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization devices availabilities change history o k response
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) Code() int {
	return 200
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/availabilities/changeHistory][%d] getOrganizationDevicesAvailabilitiesChangeHistoryOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/availabilities/changeHistory][%d] getOrganizationDevicesAvailabilitiesChangeHistoryOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) GetPayload() []*GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0 get organization devices availabilities change history o k body items0
swagger:model GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0
*/
type GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0 struct {

	// details
	Details *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details `json:"details,omitempty"`

	// device
	Device *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device `json:"device,omitempty"`

	// network
	Network *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network `json:"network,omitempty"`

	// Timestamp, in iso8601 format, at which the event happened
	// Format: date-time
	Ts strfmt.DateTime `json:"ts,omitempty"`
}

// Validate validates this get organization devices availabilities change history o k body items0
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(o.Device) { // not required
		return nil
	}

	if o.Device != nil {
		if err := o.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(o.Network) { // not required
		return nil
	}

	if o.Network != nil {
		if err := o.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) validateTs(formats strfmt.Registry) error {
	if swag.IsZero(o.Ts) { // not required
		return nil
	}

	if err := validate.FormatOf("ts", "body", "date-time", o.Ts.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organization devices availabilities change history o k body items0 based on the context it is used
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {

		if swag.IsZero(o.Details) { // not required
			return nil
		}

		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if o.Device != nil {

		if swag.IsZero(o.Device) { // not required
			return nil
		}

		if err := o.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if o.Network != nil {

		if swag.IsZero(o.Network) { // not required
			return nil
		}

		if err := o.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details Details about the status changes
swagger:model GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details
*/
type GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details struct {

	// Details about the new status
	New []*GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0 `json:"new"`

	// Details about the old status
	Old []*GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0 `json:"old"`
}

// Validate validates this get organization devices availabilities change history o k body items0 details
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNew(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOld(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) validateNew(formats strfmt.Registry) error {
	if swag.IsZero(o.New) { // not required
		return nil
	}

	for i := 0; i < len(o.New); i++ {
		if swag.IsZero(o.New[i]) { // not required
			continue
		}

		if o.New[i] != nil {
			if err := o.New[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + "new" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + "new" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) validateOld(formats strfmt.Registry) error {
	if swag.IsZero(o.Old) { // not required
		return nil
	}

	for i := 0; i < len(o.Old); i++ {
		if swag.IsZero(o.Old[i]) { // not required
			continue
		}

		if o.Old[i] != nil {
			if err := o.Old[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + "old" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + "old" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization devices availabilities change history o k body items0 details based on the context it is used
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNew(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOld(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) contextValidateNew(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.New); i++ {

		if o.New[i] != nil {

			if swag.IsZero(o.New[i]) { // not required
				return nil
			}

			if err := o.New[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + "new" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + "new" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) contextValidateOld(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Old); i++ {

		if o.Old[i] != nil {

			if swag.IsZero(o.Old[i]) { // not required
				return nil
			}

			if err := o.Old[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + "old" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + "old" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0 get organization devices availabilities change history o k body items0 details new items0
swagger:model GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0
*/
type GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0 struct {

	// Name of the detail
	Name string `json:"name,omitempty"`

	// Value of the detail
	Value string `json:"value,omitempty"`
}

// Validate validates this get organization devices availabilities change history o k body items0 details new items0
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization devices availabilities change history o k body items0 details new items0 based on context it is used
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsNewItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0 get organization devices availabilities change history o k body items0 details old items0
swagger:model GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0
*/
type GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0 struct {

	// Name of the detail
	Name string `json:"name,omitempty"`

	// Value of the detail
	Value string `json:"value,omitempty"`
}

// Validate validates this get organization devices availabilities change history o k body items0 details old items0
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization devices availabilities change history o k body items0 details old items0 based on context it is used
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DetailsOldItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device Device information
swagger:model GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device
*/
type GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device struct {

	// Device model
	Model string `json:"model,omitempty"`

	// Device name
	Name string `json:"name,omitempty"`

	// Device product type.
	// Enum: [appliance camera cellularGateway cloudGateway sensor switch systemsManager wireless]
	ProductType string `json:"productType,omitempty"`

	// Device serial number
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get organization devices availabilities change history o k body items0 device
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceTypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["appliance","camera","cellularGateway","cloudGateway","sensor","switch","systemsManager","wireless"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceTypeProductTypePropEnum = append(getOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceTypeProductTypePropEnum, v)
	}
}

const (

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeAppliance captures enum value "appliance"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeAppliance string = "appliance"

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeCamera captures enum value "camera"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeCamera string = "camera"

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeCellularGateway captures enum value "cellularGateway"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeCellularGateway string = "cellularGateway"

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeCloudGateway captures enum value "cloudGateway"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeCloudGateway string = "cloudGateway"

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeSensor captures enum value "sensor"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeSensor string = "sensor"

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeSwitch captures enum value "switch"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeSwitch string = "switch"

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeSystemsManager captures enum value "systemsManager"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeSystemsManager string = "systemsManager"

	// GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeWireless captures enum value "wireless"
	GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceProductTypeWireless string = "wireless"
)

// prop value enum
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0DeviceTypeProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device) validateProductType(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductType) { // not required
		return nil
	}

	// value enum
	if err := o.validateProductTypeEnum("device"+"."+"productType", "body", o.ProductType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organization devices availabilities change history o k body items0 device based on context it is used
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network Network information
swagger:model GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network
*/
type GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network struct {

	// Network id
	ID string `json:"id,omitempty"`

	// Network name
	Name string `json:"name,omitempty"`

	// Network tags
	Tags []string `json:"tags"`

	// Network dashboard url
	URL string `json:"url,omitempty"`
}

// Validate validates this get organization devices availabilities change history o k body items0 network
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization devices availabilities change history o k body items0 network based on context it is used
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesAvailabilitiesChangeHistoryOKBodyItems0Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

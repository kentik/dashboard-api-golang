// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDeviceApplianceRadioSettingsReader is a Reader for the GetDeviceApplianceRadioSettings structure.
type GetDeviceApplianceRadioSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceApplianceRadioSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceApplianceRadioSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /devices/{serial}/appliance/radio/settings] getDeviceApplianceRadioSettings", response, response.Code())
	}
}

// NewGetDeviceApplianceRadioSettingsOK creates a GetDeviceApplianceRadioSettingsOK with default headers values
func NewGetDeviceApplianceRadioSettingsOK() *GetDeviceApplianceRadioSettingsOK {
	return &GetDeviceApplianceRadioSettingsOK{}
}

/*
GetDeviceApplianceRadioSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetDeviceApplianceRadioSettingsOK struct {
	Payload *GetDeviceApplianceRadioSettingsOKBody
}

// IsSuccess returns true when this get device appliance radio settings o k response has a 2xx status code
func (o *GetDeviceApplianceRadioSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get device appliance radio settings o k response has a 3xx status code
func (o *GetDeviceApplianceRadioSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device appliance radio settings o k response has a 4xx status code
func (o *GetDeviceApplianceRadioSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device appliance radio settings o k response has a 5xx status code
func (o *GetDeviceApplianceRadioSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get device appliance radio settings o k response a status code equal to that given
func (o *GetDeviceApplianceRadioSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get device appliance radio settings o k response
func (o *GetDeviceApplianceRadioSettingsOK) Code() int {
	return 200
}

func (o *GetDeviceApplianceRadioSettingsOK) Error() string {
	return fmt.Sprintf("[GET /devices/{serial}/appliance/radio/settings][%d] getDeviceApplianceRadioSettingsOK  %+v", 200, o.Payload)
}

func (o *GetDeviceApplianceRadioSettingsOK) String() string {
	return fmt.Sprintf("[GET /devices/{serial}/appliance/radio/settings][%d] getDeviceApplianceRadioSettingsOK  %+v", 200, o.Payload)
}

func (o *GetDeviceApplianceRadioSettingsOK) GetPayload() *GetDeviceApplianceRadioSettingsOKBody {
	return o.Payload
}

func (o *GetDeviceApplianceRadioSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceApplianceRadioSettingsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDeviceApplianceRadioSettingsOKBody get device appliance radio settings o k body
swagger:model GetDeviceApplianceRadioSettingsOKBody
*/
type GetDeviceApplianceRadioSettingsOKBody struct {

	// five ghz settings
	FiveGhzSettings *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// RF Profile ID
	RfProfileID string `json:"rfProfileId,omitempty"`

	// The device serial
	Serial string `json:"serial,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this get device appliance radio settings o k body
func (o *GetDeviceApplianceRadioSettingsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceRadioSettingsOKBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceRadioSettingsOKBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance radio settings o k body based on the context it is used
func (o *GetDeviceApplianceRadioSettingsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceRadioSettingsOKBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {

		if swag.IsZero(o.FiveGhzSettings) { // not required
			return nil
		}

		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceRadioSettingsOKBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {

		if swag.IsZero(o.TwoFourGhzSettings) { // not required
			return nil
		}

		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceRadioSettingsOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceRadioSettingsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceRadioSettingsOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceRadioSettingsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings Manual radio settings for 5 GHz
swagger:model GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings
*/
type GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings struct {

	// Manual channel for 5 GHz
	// Enum: [36 40 44 48 52 56 60 64 100 104 108 112 116 120 124 128 132 136 140 144 149 153 157 161 165 169 173 177]
	Channel int64 `json:"channel,omitempty"`

	// Manual channel width for 5 GHz
	// Enum: [0 20 40 80 160]
	ChannelWidth int64 `json:"channelWidth,omitempty"`

	// Manual target power for 5 GHz
	TargetPower int64 `json:"targetPower,omitempty"`
}

// Validate validates this get device appliance radio settings o k body five ghz settings
func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,144,149,153,157,161,165,169,173,177]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelPropEnum = append(getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelPropEnum, v)
	}
}

// prop value enum
func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) validateChannelEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) validateChannel(formats strfmt.Registry) error {
	if swag.IsZero(o.Channel) { // not required
		return nil
	}

	// value enum
	if err := o.validateChannelEnum("getDeviceApplianceRadioSettingsOK"+"."+"fiveGhzSettings"+"."+"channel", "body", o.Channel); err != nil {
		return err
	}

	return nil
}

var getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelWidthPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,20,40,80,160]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelWidthPropEnum = append(getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelWidthPropEnum, v)
	}
}

// prop value enum
func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) validateChannelWidthEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, getDeviceApplianceRadioSettingsOKBodyFiveGhzSettingsTypeChannelWidthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) validateChannelWidth(formats strfmt.Registry) error {
	if swag.IsZero(o.ChannelWidth) { // not required
		return nil
	}

	// value enum
	if err := o.validateChannelWidthEnum("getDeviceApplianceRadioSettingsOK"+"."+"fiveGhzSettings"+"."+"channelWidth", "body", o.ChannelWidth); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get device appliance radio settings o k body five ghz settings based on context it is used
func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceRadioSettingsOKBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings Manual radio settings for 2.4 GHz
swagger:model GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings
*/
type GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings struct {

	// Manual channel for 2.4 GHz
	// Enum: [1 2 3 4 5 6 7 8 9 10 11 12 13 14]
	Channel int64 `json:"channel,omitempty"`

	// Manual target power for 2.4 GHz
	TargetPower int64 `json:"targetPower,omitempty"`
}

// Validate validates this get device appliance radio settings o k body two four ghz settings
func (o *GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettingsTypeChannelPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7,8,9,10,11,12,13,14]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettingsTypeChannelPropEnum = append(getDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettingsTypeChannelPropEnum, v)
	}
}

// prop value enum
func (o *GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings) validateChannelEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, getDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettingsTypeChannelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings) validateChannel(formats strfmt.Registry) error {
	if swag.IsZero(o.Channel) { // not required
		return nil
	}

	// value enum
	if err := o.validateChannelEnum("getDeviceApplianceRadioSettingsOK"+"."+"twoFourGhzSettings"+"."+"channel", "body", o.Channel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get device appliance radio settings o k body two four ghz settings based on context it is used
func (o *GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceRadioSettingsOKBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

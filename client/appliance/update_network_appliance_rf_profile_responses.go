// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceRfProfileReader is a Reader for the UpdateNetworkApplianceRfProfile structure.
type UpdateNetworkApplianceRfProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceRfProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceRfProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PUT /networks/{networkId}/appliance/rfProfiles/{rfProfileId}] updateNetworkApplianceRfProfile", response, response.Code())
	}
}

// NewUpdateNetworkApplianceRfProfileOK creates a UpdateNetworkApplianceRfProfileOK with default headers values
func NewUpdateNetworkApplianceRfProfileOK() *UpdateNetworkApplianceRfProfileOK {
	return &UpdateNetworkApplianceRfProfileOK{}
}

/*
UpdateNetworkApplianceRfProfileOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceRfProfileOK struct {
	Payload *UpdateNetworkApplianceRfProfileOKBody
}

// IsSuccess returns true when this update network appliance rf profile o k response has a 2xx status code
func (o *UpdateNetworkApplianceRfProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network appliance rf profile o k response has a 3xx status code
func (o *UpdateNetworkApplianceRfProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network appliance rf profile o k response has a 4xx status code
func (o *UpdateNetworkApplianceRfProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network appliance rf profile o k response has a 5xx status code
func (o *UpdateNetworkApplianceRfProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network appliance rf profile o k response a status code equal to that given
func (o *UpdateNetworkApplianceRfProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network appliance rf profile o k response
func (o *UpdateNetworkApplianceRfProfileOK) Code() int {
	return 200
}

func (o *UpdateNetworkApplianceRfProfileOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/rfProfiles/{rfProfileId}][%d] updateNetworkApplianceRfProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceRfProfileOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/rfProfiles/{rfProfileId}][%d] updateNetworkApplianceRfProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceRfProfileOK) GetPayload() *UpdateNetworkApplianceRfProfileOKBody {
	return o.Payload
}

func (o *UpdateNetworkApplianceRfProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkApplianceRfProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkApplianceRfProfileBody update network appliance rf profile body
// Example: {"fiveGhzSettings":{"axEnabled":true,"minBitrate":48},"name":"MX RF Profile","perSsidSettings":{"1":{"bandOperationMode":"dual","bandSteeringEnabled":true},"2":{"bandOperationMode":"dual","bandSteeringEnabled":true},"3":{"bandOperationMode":"dual","bandSteeringEnabled":true},"4":{"bandOperationMode":"dual","bandSteeringEnabled":true}},"twoFourGhzSettings":{"axEnabled":true,"minBitrate":12}}
swagger:model UpdateNetworkApplianceRfProfileBody
*/
type UpdateNetworkApplianceRfProfileBody struct {

	// five ghz settings
	FiveGhzSettings *UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// The name of the new profile. Must be unique.
	Name string `json:"name,omitempty"`

	// per ssid settings
	PerSsidSettings *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this update network appliance rf profile body
func (o *UpdateNetworkApplianceRfProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network appliance rf profile body based on the context it is used
func (o *UpdateNetworkApplianceRfProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {

		if swag.IsZero(o.FiveGhzSettings) { // not required
			return nil
		}

		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {

		if swag.IsZero(o.PerSsidSettings) { // not required
			return nil
		}

		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {

		if swag.IsZero(o.TwoFourGhzSettings) { // not required
			return nil
		}

		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBody update network appliance rf profile o k body
swagger:model UpdateNetworkApplianceRfProfileOKBody
*/
type UpdateNetworkApplianceRfProfileOKBody struct {

	// five ghz settings
	FiveGhzSettings *UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// ID of the RF Profile.
	ID string `json:"id,omitempty"`

	// The name of the profile.
	Name string `json:"name,omitempty"`

	// ID of network this RF Profile belongs in.
	NetworkID string `json:"networkId,omitempty"`

	// per ssid settings
	PerSsidSettings *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this update network appliance rf profile o k body
func (o *UpdateNetworkApplianceRfProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network appliance rf profile o k body based on the context it is used
func (o *UpdateNetworkApplianceRfProfileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {

		if swag.IsZero(o.FiveGhzSettings) { // not required
			return nil
		}

		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {

		if swag.IsZero(o.PerSsidSettings) { // not required
			return nil
		}

		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {

		if swag.IsZero(o.TwoFourGhzSettings) { // not required
			return nil
		}

		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings Settings related to 5Ghz band.
swagger:model UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings
*/
type UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings struct {

	// Whether ax radio on 5Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate int64 `json:"minBitrate,omitempty"`
}

// Validate validates this update network appliance rf profile o k body five ghz settings
func (o *UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile o k body five ghz settings based on context it is used
func (o *UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings
*/
type UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings struct {

	// 1
	Nr1 *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 2
	Nr2 *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4 `json:"4,omitempty"`
}

// Validate validates this update network appliance rf profile o k body per ssid settings
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network appliance rf profile o k body per ssid settings based on the context it is used
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {

		if swag.IsZero(o.Nr1) { // not required
			return nil
		}

		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {

		if swag.IsZero(o.Nr2) { // not required
			return nil
		}

		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {

		if swag.IsZero(o.Nr3) { // not required
			return nil
		}

		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {

		if swag.IsZero(o.Nr4) { // not required
			return nil
		}

		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1 Settings for SSID 1.
swagger:model UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1
*/
type UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile o k body per ssid settings nr1
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile o k body per ssid settings nr1 based on context it is used
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2 Settings for SSID 2.
swagger:model UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2
*/
type UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile o k body per ssid settings nr2
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile o k body per ssid settings nr2 based on context it is used
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3 Settings for SSID 3.
swagger:model UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3
*/
type UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile o k body per ssid settings nr3
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile o k body per ssid settings nr3 based on context it is used
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4 Settings for SSID 4.
swagger:model UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4
*/
type UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile o k body per ssid settings nr4
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile o k body per ssid settings nr4 based on context it is used
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings Settings related to 2.4Ghz band.
swagger:model UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings
*/
type UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings struct {

	// Whether ax radio on 2.4Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network appliance rf profile o k body two four ghz settings
func (o *UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile o k body two four ghz settings based on context it is used
func (o *UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileOKBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings Settings related to 5Ghz band
swagger:model UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings
*/
type UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings struct {

	// Determines whether ax radio on 5Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`
}

// Validate validates this update network appliance rf profile params body five ghz settings
func (o *UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile params body five ghz settings based on context it is used
func (o *UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileParamsBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings
*/
type UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings struct {

	// 1
	Nr1 *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 2
	Nr2 *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4 `json:"4,omitempty"`
}

// Validate validates this update network appliance rf profile params body per ssid settings
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network appliance rf profile params body per ssid settings based on the context it is used
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {

		if swag.IsZero(o.Nr1) { // not required
			return nil
		}

		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {

		if swag.IsZero(o.Nr2) { // not required
			return nil
		}

		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {

		if swag.IsZero(o.Nr3) { // not required
			return nil
		}

		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {

		if swag.IsZero(o.Nr4) { // not required
			return nil
		}

		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1 Settings for SSID 1
swagger:model UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1
*/
type UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile params body per ssid settings nr1
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum = append(updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr6ghz captures enum value "6ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr6ghz string = "6ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual captures enum value "dual"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual string = "dual"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeMulti captures enum value "multi"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"1"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance rf profile params body per ssid settings nr1 based on context it is used
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2 Settings for SSID 2
swagger:model UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2
*/
type UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile params body per ssid settings nr2
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum = append(updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr6ghz captures enum value "6ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr6ghz string = "6ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual captures enum value "dual"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual string = "dual"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeMulti captures enum value "multi"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"2"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance rf profile params body per ssid settings nr2 based on context it is used
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3 Settings for SSID 3
swagger:model UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3
*/
type UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile params body per ssid settings nr3
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum = append(updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr6ghz captures enum value "6ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr6ghz string = "6ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual captures enum value "dual"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual string = "dual"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeMulti captures enum value "multi"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"3"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance rf profile params body per ssid settings nr3 based on context it is used
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4 Settings for SSID 4
swagger:model UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4
*/
type UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network appliance rf profile params body per ssid settings nr4
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum = append(updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr6ghz captures enum value "6ghz"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr6ghz string = "6ghz"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual captures enum value "dual"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual string = "dual"

	// UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeMulti captures enum value "multi"
	UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"4"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance rf profile params body per ssid settings nr4 based on context it is used
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings Settings related to 2.4Ghz band
swagger:model UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings
*/
type UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings struct {

	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network appliance rf profile params body two four ghz settings
func (o *UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance rf profile params body two four ghz settings based on context it is used
func (o *UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

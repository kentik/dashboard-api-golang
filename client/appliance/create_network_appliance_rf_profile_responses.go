// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkApplianceRfProfileReader is a Reader for the CreateNetworkApplianceRfProfile structure.
type CreateNetworkApplianceRfProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkApplianceRfProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNetworkApplianceRfProfileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /networks/{networkId}/appliance/rfProfiles] createNetworkApplianceRfProfile", response, response.Code())
	}
}

// NewCreateNetworkApplianceRfProfileCreated creates a CreateNetworkApplianceRfProfileCreated with default headers values
func NewCreateNetworkApplianceRfProfileCreated() *CreateNetworkApplianceRfProfileCreated {
	return &CreateNetworkApplianceRfProfileCreated{}
}

/*
CreateNetworkApplianceRfProfileCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateNetworkApplianceRfProfileCreated struct {
	Payload *CreateNetworkApplianceRfProfileCreatedBody
}

// IsSuccess returns true when this create network appliance rf profile created response has a 2xx status code
func (o *CreateNetworkApplianceRfProfileCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create network appliance rf profile created response has a 3xx status code
func (o *CreateNetworkApplianceRfProfileCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network appliance rf profile created response has a 4xx status code
func (o *CreateNetworkApplianceRfProfileCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create network appliance rf profile created response has a 5xx status code
func (o *CreateNetworkApplianceRfProfileCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create network appliance rf profile created response a status code equal to that given
func (o *CreateNetworkApplianceRfProfileCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create network appliance rf profile created response
func (o *CreateNetworkApplianceRfProfileCreated) Code() int {
	return 201
}

func (o *CreateNetworkApplianceRfProfileCreated) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/appliance/rfProfiles][%d] createNetworkApplianceRfProfileCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkApplianceRfProfileCreated) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/appliance/rfProfiles][%d] createNetworkApplianceRfProfileCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkApplianceRfProfileCreated) GetPayload() *CreateNetworkApplianceRfProfileCreatedBody {
	return o.Payload
}

func (o *CreateNetworkApplianceRfProfileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateNetworkApplianceRfProfileCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateNetworkApplianceRfProfileBody create network appliance rf profile body
// Example: {"fiveGhzSettings":{"axEnabled":true,"minBitrate":48},"name":"MX RF Profile","perSsidSettings":{"1":{"bandOperationMode":"dual","bandSteeringEnabled":true},"2":{"bandOperationMode":"dual","bandSteeringEnabled":true},"3":{"bandOperationMode":"dual","bandSteeringEnabled":true},"4":{"bandOperationMode":"dual","bandSteeringEnabled":true}},"twoFourGhzSettings":{"axEnabled":true,"minBitrate":12}}
swagger:model CreateNetworkApplianceRfProfileBody
*/
type CreateNetworkApplianceRfProfileBody struct {

	// five ghz settings
	FiveGhzSettings *CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// The name of the new profile. Must be unique. This param is required on creation.
	// Required: true
	Name *string `json:"name"`

	// per ssid settings
	PerSsidSettings *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this create network appliance rf profile body
func (o *CreateNetworkApplianceRfProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkApplianceRfProfile"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network appliance rf profile body based on the context it is used
func (o *CreateNetworkApplianceRfProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {

		if swag.IsZero(o.FiveGhzSettings) { // not required
			return nil
		}

		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {

		if swag.IsZero(o.PerSsidSettings) { // not required
			return nil
		}

		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {

		if swag.IsZero(o.TwoFourGhzSettings) { // not required
			return nil
		}

		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBody create network appliance rf profile created body
swagger:model CreateNetworkApplianceRfProfileCreatedBody
*/
type CreateNetworkApplianceRfProfileCreatedBody struct {

	// five ghz settings
	FiveGhzSettings *CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// ID of the RF Profile.
	ID string `json:"id,omitempty"`

	// The name of the profile.
	Name string `json:"name,omitempty"`

	// ID of network this RF Profile belongs in.
	NetworkID string `json:"networkId,omitempty"`

	// per ssid settings
	PerSsidSettings *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this create network appliance rf profile created body
func (o *CreateNetworkApplianceRfProfileCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network appliance rf profile created body based on the context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {

		if swag.IsZero(o.FiveGhzSettings) { // not required
			return nil
		}

		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {

		if swag.IsZero(o.PerSsidSettings) { // not required
			return nil
		}

		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {

		if swag.IsZero(o.TwoFourGhzSettings) { // not required
			return nil
		}

		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings Settings related to 5Ghz band.
swagger:model CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings
*/
type CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings struct {

	// Whether ax radio on 5Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate int64 `json:"minBitrate,omitempty"`
}

// Validate validates this create network appliance rf profile created body five ghz settings
func (o *CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile created body five ghz settings based on context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings
*/
type CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings struct {

	// 1
	Nr1 *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 2
	Nr2 *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4 `json:"4,omitempty"`
}

// Validate validates this create network appliance rf profile created body per ssid settings
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network appliance rf profile created body per ssid settings based on the context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {

		if swag.IsZero(o.Nr1) { // not required
			return nil
		}

		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {

		if swag.IsZero(o.Nr2) { // not required
			return nil
		}

		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {

		if swag.IsZero(o.Nr3) { // not required
			return nil
		}

		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {

		if swag.IsZero(o.Nr4) { // not required
			return nil
		}

		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1 Settings for SSID 1.
swagger:model CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1
*/
type CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile created body per ssid settings nr1
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile created body per ssid settings nr1 based on context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2 Settings for SSID 2.
swagger:model CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2
*/
type CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile created body per ssid settings nr2
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile created body per ssid settings nr2 based on context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3 Settings for SSID 3.
swagger:model CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3
*/
type CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile created body per ssid settings nr3
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile created body per ssid settings nr3 based on context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4 Settings for SSID 4.
swagger:model CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4
*/
type CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile created body per ssid settings nr4
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile created body per ssid settings nr4 based on context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings Settings related to 2.4Ghz band.
swagger:model CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings
*/
type CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings struct {

	// Whether ax radio on 2.4Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network appliance rf profile created body two four ghz settings
func (o *CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile created body two four ghz settings based on context it is used
func (o *CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileCreatedBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings Settings related to 5Ghz band
swagger:model CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings
*/
type CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings struct {

	// Determines whether ax radio on 5Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12.
	MinBitrate int64 `json:"minBitrate,omitempty"`
}

// Validate validates this create network appliance rf profile params body five ghz settings
func (o *CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile params body five ghz settings based on context it is used
func (o *CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileParamsBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings
*/
type CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings struct {

	// 1
	Nr1 *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 2
	Nr2 *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4 `json:"4,omitempty"`
}

// Validate validates this create network appliance rf profile params body per ssid settings
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network appliance rf profile params body per ssid settings based on the context it is used
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {

		if swag.IsZero(o.Nr1) { // not required
			return nil
		}

		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {

		if swag.IsZero(o.Nr2) { // not required
			return nil
		}

		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {

		if swag.IsZero(o.Nr3) { // not required
			return nil
		}

		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {

		if swag.IsZero(o.Nr4) { // not required
			return nil
		}

		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkApplianceRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileParamsBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1 Settings for SSID 1
swagger:model CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1
*/
type CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile params body per ssid settings nr1
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum = append(createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr6ghz captures enum value "6ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr6ghz string = "6ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual captures enum value "dual"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual string = "dual"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeMulti captures enum value "multi"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"1"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network appliance rf profile params body per ssid settings nr1 based on context it is used
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2 Settings for SSID 2
swagger:model CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2
*/
type CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile params body per ssid settings nr2
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum = append(createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr6ghz captures enum value "6ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr6ghz string = "6ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual captures enum value "dual"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual string = "dual"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeMulti captures enum value "multi"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"2"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network appliance rf profile params body per ssid settings nr2 based on context it is used
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3 Settings for SSID 3
swagger:model CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3
*/
type CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile params body per ssid settings nr3
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum = append(createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr6ghz captures enum value "6ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr6ghz string = "6ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual captures enum value "dual"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual string = "dual"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeMulti captures enum value "multi"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"3"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network appliance rf profile params body per ssid settings nr3 based on context it is used
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4 Settings for SSID 4
swagger:model CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4
*/
type CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4 struct {

	// Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
	// Enum: [2.4ghz 5ghz 6ghz dual multi]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network appliance rf profile params body per ssid settings nr4
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","6ghz","dual","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum = append(createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr6ghz captures enum value "6ghz"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr6ghz string = "6ghz"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual captures enum value "dual"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual string = "dual"

	// CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeMulti captures enum value "multi"
	CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeMulti string = "multi"
)

// prop value enum
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkApplianceRfProfile"+"."+"perSsidSettings"+"."+"4"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network appliance rf profile params body per ssid settings nr4 based on context it is used
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileParamsBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings Settings related to 2.4Ghz band
swagger:model CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings
*/
type CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings struct {

	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network appliance rf profile params body two four ghz settings
func (o *CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network appliance rf profile params body two four ghz settings based on context it is used
func (o *CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceRfProfileParamsBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

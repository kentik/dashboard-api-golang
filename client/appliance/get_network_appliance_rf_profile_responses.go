// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkApplianceRfProfileReader is a Reader for the GetNetworkApplianceRfProfile structure.
type GetNetworkApplianceRfProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkApplianceRfProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkApplianceRfProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /networks/{networkId}/appliance/rfProfiles/{rfProfileId}] getNetworkApplianceRfProfile", response, response.Code())
	}
}

// NewGetNetworkApplianceRfProfileOK creates a GetNetworkApplianceRfProfileOK with default headers values
func NewGetNetworkApplianceRfProfileOK() *GetNetworkApplianceRfProfileOK {
	return &GetNetworkApplianceRfProfileOK{}
}

/*
GetNetworkApplianceRfProfileOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkApplianceRfProfileOK struct {
	Payload *GetNetworkApplianceRfProfileOKBody
}

// IsSuccess returns true when this get network appliance rf profile o k response has a 2xx status code
func (o *GetNetworkApplianceRfProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network appliance rf profile o k response has a 3xx status code
func (o *GetNetworkApplianceRfProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network appliance rf profile o k response has a 4xx status code
func (o *GetNetworkApplianceRfProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network appliance rf profile o k response has a 5xx status code
func (o *GetNetworkApplianceRfProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network appliance rf profile o k response a status code equal to that given
func (o *GetNetworkApplianceRfProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network appliance rf profile o k response
func (o *GetNetworkApplianceRfProfileOK) Code() int {
	return 200
}

func (o *GetNetworkApplianceRfProfileOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/appliance/rfProfiles/{rfProfileId}][%d] getNetworkApplianceRfProfileOK  %+v", 200, o.Payload)
}

func (o *GetNetworkApplianceRfProfileOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/appliance/rfProfiles/{rfProfileId}][%d] getNetworkApplianceRfProfileOK  %+v", 200, o.Payload)
}

func (o *GetNetworkApplianceRfProfileOK) GetPayload() *GetNetworkApplianceRfProfileOKBody {
	return o.Payload
}

func (o *GetNetworkApplianceRfProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkApplianceRfProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkApplianceRfProfileOKBody get network appliance rf profile o k body
swagger:model GetNetworkApplianceRfProfileOKBody
*/
type GetNetworkApplianceRfProfileOKBody struct {

	// five ghz settings
	FiveGhzSettings *GetNetworkApplianceRfProfileOKBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// ID of the RF Profile.
	ID string `json:"id,omitempty"`

	// The name of the profile.
	Name string `json:"name,omitempty"`

	// ID of network this RF Profile belongs in.
	NetworkID string `json:"networkId,omitempty"`

	// per ssid settings
	PerSsidSettings *GetNetworkApplianceRfProfileOKBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this get network appliance rf profile o k body
func (o *GetNetworkApplianceRfProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfileOKBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network appliance rf profile o k body based on the context it is used
func (o *GetNetworkApplianceRfProfileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfileOKBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {

		if swag.IsZero(o.FiveGhzSettings) { // not required
			return nil
		}

		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {

		if swag.IsZero(o.PerSsidSettings) { // not required
			return nil
		}

		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {

		if swag.IsZero(o.TwoFourGhzSettings) { // not required
			return nil
		}

		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfileOKBodyFiveGhzSettings Settings related to 5Ghz band.
swagger:model GetNetworkApplianceRfProfileOKBodyFiveGhzSettings
*/
type GetNetworkApplianceRfProfileOKBodyFiveGhzSettings struct {

	// Whether ax radio on 5Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate int64 `json:"minBitrate,omitempty"`
}

// Validate validates this get network appliance rf profile o k body five ghz settings
func (o *GetNetworkApplianceRfProfileOKBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profile o k body five ghz settings based on context it is used
func (o *GetNetworkApplianceRfProfileOKBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfileOKBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model GetNetworkApplianceRfProfileOKBodyPerSsidSettings
*/
type GetNetworkApplianceRfProfileOKBodyPerSsidSettings struct {

	// 1
	Nr1 *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 2
	Nr2 *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4 `json:"4,omitempty"`
}

// Validate validates this get network appliance rf profile o k body per ssid settings
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network appliance rf profile o k body per ssid settings based on the context it is used
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {

		if swag.IsZero(o.Nr1) { // not required
			return nil
		}

		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {

		if swag.IsZero(o.Nr2) { // not required
			return nil
		}

		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {

		if swag.IsZero(o.Nr3) { // not required
			return nil
		}

		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {

		if swag.IsZero(o.Nr4) { // not required
			return nil
		}

		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1 Settings for SSID 1.
swagger:model GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1
*/
type GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profile o k body per ssid settings nr1
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profile o k body per ssid settings nr1 based on context it is used
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2 Settings for SSID 2.
swagger:model GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2
*/
type GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profile o k body per ssid settings nr2
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profile o k body per ssid settings nr2 based on context it is used
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3 Settings for SSID 3.
swagger:model GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3
*/
type GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profile o k body per ssid settings nr3
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profile o k body per ssid settings nr3 based on context it is used
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4 Settings for SSID 4.
swagger:model GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4
*/
type GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profile o k body per ssid settings nr4
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profile o k body per ssid settings nr4 based on context it is used
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings Settings related to 2.4Ghz band.
swagger:model GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings
*/
type GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings struct {

	// Whether ax radio on 2.4Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this get network appliance rf profile o k body two four ghz settings
func (o *GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profile o k body two four ghz settings based on context it is used
func (o *GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfileOKBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

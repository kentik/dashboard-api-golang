// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetOrganizationApplianceUplinksUsageByNetworkReader is a Reader for the GetOrganizationApplianceUplinksUsageByNetwork structure.
type GetOrganizationApplianceUplinksUsageByNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationApplianceUplinksUsageByNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationApplianceUplinksUsageByNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /organizations/{organizationId}/appliance/uplinks/usage/byNetwork] getOrganizationApplianceUplinksUsageByNetwork", response, response.Code())
	}
}

// NewGetOrganizationApplianceUplinksUsageByNetworkOK creates a GetOrganizationApplianceUplinksUsageByNetworkOK with default headers values
func NewGetOrganizationApplianceUplinksUsageByNetworkOK() *GetOrganizationApplianceUplinksUsageByNetworkOK {
	return &GetOrganizationApplianceUplinksUsageByNetworkOK{}
}

/*
GetOrganizationApplianceUplinksUsageByNetworkOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationApplianceUplinksUsageByNetworkOK struct {
	Payload []*GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0
}

// IsSuccess returns true when this get organization appliance uplinks usage by network o k response has a 2xx status code
func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization appliance uplinks usage by network o k response has a 3xx status code
func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization appliance uplinks usage by network o k response has a 4xx status code
func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization appliance uplinks usage by network o k response has a 5xx status code
func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization appliance uplinks usage by network o k response a status code equal to that given
func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization appliance uplinks usage by network o k response
func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) Code() int {
	return 200
}

func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/appliance/uplinks/usage/byNetwork][%d] getOrganizationApplianceUplinksUsageByNetworkOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/appliance/uplinks/usage/byNetwork][%d] getOrganizationApplianceUplinksUsageByNetworkOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) GetPayload() []*GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationApplianceUplinksUsageByNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0 get organization appliance uplinks usage by network o k body items0
swagger:model GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0
*/
type GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0 struct {

	// Uplink usage
	ByUplink []*GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0 `json:"byUplink"`

	// Network name
	Name string `json:"name,omitempty"`

	// Network identifier
	NetworkID string `json:"networkId,omitempty"`
}

// Validate validates this get organization appliance uplinks usage by network o k body items0
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateByUplink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0) validateByUplink(formats strfmt.Registry) error {
	if swag.IsZero(o.ByUplink) { // not required
		return nil
	}

	for i := 0; i < len(o.ByUplink); i++ {
		if swag.IsZero(o.ByUplink[i]) { // not required
			continue
		}

		if o.ByUplink[i] != nil {
			if err := o.ByUplink[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byUplink" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("byUplink" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization appliance uplinks usage by network o k body items0 based on the context it is used
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateByUplink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0) contextValidateByUplink(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ByUplink); i++ {

		if o.ByUplink[i] != nil {

			if swag.IsZero(o.ByUplink[i]) { // not required
				return nil
			}

			if err := o.ByUplink[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byUplink" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("byUplink" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0 get organization appliance uplinks usage by network o k body items0 by uplink items0
swagger:model GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0
*/
type GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0 struct {

	// Uplink name
	Interface string `json:"interface,omitempty"`

	// Bytes received
	Received int64 `json:"received,omitempty"`

	// Bytes sent
	Sent int64 `json:"sent,omitempty"`

	// Uplink serial
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get organization appliance uplinks usage by network o k body items0 by uplink items0
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization appliance uplinks usage by network o k body items0 by uplink items0 based on context it is used
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationApplianceUplinksUsageByNetworkOKBodyItems0ByUplinkItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

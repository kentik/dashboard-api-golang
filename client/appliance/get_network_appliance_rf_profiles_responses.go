// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkApplianceRfProfilesReader is a Reader for the GetNetworkApplianceRfProfiles structure.
type GetNetworkApplianceRfProfilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkApplianceRfProfilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkApplianceRfProfilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /networks/{networkId}/appliance/rfProfiles] getNetworkApplianceRfProfiles", response, response.Code())
	}
}

// NewGetNetworkApplianceRfProfilesOK creates a GetNetworkApplianceRfProfilesOK with default headers values
func NewGetNetworkApplianceRfProfilesOK() *GetNetworkApplianceRfProfilesOK {
	return &GetNetworkApplianceRfProfilesOK{}
}

/*
GetNetworkApplianceRfProfilesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkApplianceRfProfilesOK struct {
	Payload *GetNetworkApplianceRfProfilesOKBody
}

// IsSuccess returns true when this get network appliance rf profiles o k response has a 2xx status code
func (o *GetNetworkApplianceRfProfilesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network appliance rf profiles o k response has a 3xx status code
func (o *GetNetworkApplianceRfProfilesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network appliance rf profiles o k response has a 4xx status code
func (o *GetNetworkApplianceRfProfilesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network appliance rf profiles o k response has a 5xx status code
func (o *GetNetworkApplianceRfProfilesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network appliance rf profiles o k response a status code equal to that given
func (o *GetNetworkApplianceRfProfilesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network appliance rf profiles o k response
func (o *GetNetworkApplianceRfProfilesOK) Code() int {
	return 200
}

func (o *GetNetworkApplianceRfProfilesOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/appliance/rfProfiles][%d] getNetworkApplianceRfProfilesOK  %+v", 200, o.Payload)
}

func (o *GetNetworkApplianceRfProfilesOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/appliance/rfProfiles][%d] getNetworkApplianceRfProfilesOK  %+v", 200, o.Payload)
}

func (o *GetNetworkApplianceRfProfilesOK) GetPayload() *GetNetworkApplianceRfProfilesOKBody {
	return o.Payload
}

func (o *GetNetworkApplianceRfProfilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkApplianceRfProfilesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkApplianceRfProfilesOKBody get network appliance rf profiles o k body
swagger:model GetNetworkApplianceRfProfilesOKBody
*/
type GetNetworkApplianceRfProfilesOKBody struct {

	// RF Profiles
	Assigned []*GetNetworkApplianceRfProfilesOKBodyAssignedItems0 `json:"assigned"`
}

// Validate validates this get network appliance rf profiles o k body
func (o *GetNetworkApplianceRfProfilesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBody) validateAssigned(formats strfmt.Registry) error {
	if swag.IsZero(o.Assigned) { // not required
		return nil
	}

	for i := 0; i < len(o.Assigned); i++ {
		if swag.IsZero(o.Assigned[i]) { // not required
			continue
		}

		if o.Assigned[i] != nil {
			if err := o.Assigned[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkApplianceRfProfilesOK" + "." + "assigned" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkApplianceRfProfilesOK" + "." + "assigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network appliance rf profiles o k body based on the context it is used
func (o *GetNetworkApplianceRfProfilesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAssigned(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBody) contextValidateAssigned(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Assigned); i++ {

		if o.Assigned[i] != nil {

			if swag.IsZero(o.Assigned[i]) { // not required
				return nil
			}

			if err := o.Assigned[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkApplianceRfProfilesOK" + "." + "assigned" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkApplianceRfProfilesOK" + "." + "assigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0 get network appliance rf profiles o k body assigned items0
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0 struct {

	// five ghz settings
	FiveGhzSettings *GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// ID of the RF Profile.
	ID string `json:"id,omitempty"`

	// The name of the profile.
	Name string `json:"name,omitempty"`

	// ID of network this RF Profile belongs in.
	NetworkID string `json:"networkId,omitempty"`

	// per ssid settings
	PerSsidSettings *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings `json:"perSsidSettings,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network appliance rf profiles o k body assigned items0 based on the context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {

		if swag.IsZero(o.FiveGhzSettings) { // not required
			return nil
		}

		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {

		if swag.IsZero(o.PerSsidSettings) { // not required
			return nil
		}

		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {

		if swag.IsZero(o.TwoFourGhzSettings) { // not required
			return nil
		}

		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings Settings related to 5Ghz band.
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings struct {

	// Whether ax radio on 5Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate int64 `json:"minBitrate,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0 five ghz settings
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profiles o k body assigned items0 five ghz settings based on context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0FiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings Per-SSID radio settings by number.
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings struct {

	// 1
	Nr1 *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1 `json:"1,omitempty"`

	// 2
	Nr2 *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4 `json:"4,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0 per ssid settings
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network appliance rf profiles o k body assigned items0 per ssid settings based on the context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {

		if swag.IsZero(o.Nr1) { // not required
			return nil
		}

		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {

		if swag.IsZero(o.Nr2) { // not required
			return nil
		}

		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {

		if swag.IsZero(o.Nr3) { // not required
			return nil
		}

		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {

		if swag.IsZero(o.Nr4) { // not required
			return nil
		}

		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1 Settings for SSID 1.
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr1
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr1 based on context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2 Settings for SSID 2.
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr2
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr2 based on context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3 Settings for SSID 3.
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr3
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr3 based on context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4 Settings for SSID 4.
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4 struct {

	// Band mode of this SSID
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Whether this SSID steers clients to the most open band between 2.4 GHz and 5 GHz.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr4
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profiles o k body assigned items0 per ssid settings nr4 based on context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0PerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings Settings related to 2.4Ghz band.
swagger:model GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings
*/
type GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings struct {

	// Whether ax radio on 2.4Ghz band is on or off.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Min bitrate (Mbps) of 2.4Ghz band.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this get network appliance rf profiles o k body assigned items0 two four ghz settings
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance rf profiles o k body assigned items0 two four ghz settings based on context it is used
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceRfProfilesOKBodyAssignedItems0TwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

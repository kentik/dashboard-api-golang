// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSwitchQosRuleReader is a Reader for the GetNetworkSwitchQosRule structure.
type GetNetworkSwitchQosRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSwitchQosRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSwitchQosRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /networks/{networkId}/switch/qosRules/{qosRuleId}] getNetworkSwitchQosRule", response, response.Code())
	}
}

// NewGetNetworkSwitchQosRuleOK creates a GetNetworkSwitchQosRuleOK with default headers values
func NewGetNetworkSwitchQosRuleOK() *GetNetworkSwitchQosRuleOK {
	return &GetNetworkSwitchQosRuleOK{}
}

/*
GetNetworkSwitchQosRuleOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSwitchQosRuleOK struct {
	Payload *GetNetworkSwitchQosRuleOKBody
}

// IsSuccess returns true when this get network switch qos rule o k response has a 2xx status code
func (o *GetNetworkSwitchQosRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network switch qos rule o k response has a 3xx status code
func (o *GetNetworkSwitchQosRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network switch qos rule o k response has a 4xx status code
func (o *GetNetworkSwitchQosRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network switch qos rule o k response has a 5xx status code
func (o *GetNetworkSwitchQosRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network switch qos rule o k response a status code equal to that given
func (o *GetNetworkSwitchQosRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network switch qos rule o k response
func (o *GetNetworkSwitchQosRuleOK) Code() int {
	return 200
}

func (o *GetNetworkSwitchQosRuleOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/qosRules/{qosRuleId}][%d] getNetworkSwitchQosRuleOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchQosRuleOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/qosRules/{qosRuleId}][%d] getNetworkSwitchQosRuleOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchQosRuleOK) GetPayload() *GetNetworkSwitchQosRuleOKBody {
	return o.Payload
}

func (o *GetNetworkSwitchQosRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkSwitchQosRuleOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSwitchQosRuleOKBody get network switch qos rule o k body
swagger:model GetNetworkSwitchQosRuleOKBody
*/
type GetNetworkSwitchQosRuleOKBody struct {

	// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
	Dscp int64 `json:"dscp,omitempty"`

	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort int64 `json:"dstPort,omitempty"`

	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange string `json:"dstPortRange,omitempty"`

	// Qos Rule id
	ID string `json:"id,omitempty"`

	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
	Protocol string `json:"protocol,omitempty"`

	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort int64 `json:"srcPort,omitempty"`

	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange string `json:"srcPortRange,omitempty"`

	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this get network switch qos rule o k body
func (o *GetNetworkSwitchQosRuleOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch qos rule o k body based on context it is used
func (o *GetNetworkSwitchQosRuleOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchQosRuleOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchQosRuleOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchQosRuleOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

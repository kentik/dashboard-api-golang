// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSwitchAlternateManagementInterfaceReader is a Reader for the GetNetworkSwitchAlternateManagementInterface structure.
type GetNetworkSwitchAlternateManagementInterfaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSwitchAlternateManagementInterfaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSwitchAlternateManagementInterfaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /networks/{networkId}/switch/alternateManagementInterface] getNetworkSwitchAlternateManagementInterface", response, response.Code())
	}
}

// NewGetNetworkSwitchAlternateManagementInterfaceOK creates a GetNetworkSwitchAlternateManagementInterfaceOK with default headers values
func NewGetNetworkSwitchAlternateManagementInterfaceOK() *GetNetworkSwitchAlternateManagementInterfaceOK {
	return &GetNetworkSwitchAlternateManagementInterfaceOK{}
}

/*
GetNetworkSwitchAlternateManagementInterfaceOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSwitchAlternateManagementInterfaceOK struct {
	Payload *GetNetworkSwitchAlternateManagementInterfaceOKBody
}

// IsSuccess returns true when this get network switch alternate management interface o k response has a 2xx status code
func (o *GetNetworkSwitchAlternateManagementInterfaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network switch alternate management interface o k response has a 3xx status code
func (o *GetNetworkSwitchAlternateManagementInterfaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network switch alternate management interface o k response has a 4xx status code
func (o *GetNetworkSwitchAlternateManagementInterfaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network switch alternate management interface o k response has a 5xx status code
func (o *GetNetworkSwitchAlternateManagementInterfaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network switch alternate management interface o k response a status code equal to that given
func (o *GetNetworkSwitchAlternateManagementInterfaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network switch alternate management interface o k response
func (o *GetNetworkSwitchAlternateManagementInterfaceOK) Code() int {
	return 200
}

func (o *GetNetworkSwitchAlternateManagementInterfaceOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/alternateManagementInterface][%d] getNetworkSwitchAlternateManagementInterfaceOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchAlternateManagementInterfaceOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/alternateManagementInterface][%d] getNetworkSwitchAlternateManagementInterfaceOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchAlternateManagementInterfaceOK) GetPayload() *GetNetworkSwitchAlternateManagementInterfaceOKBody {
	return o.Payload
}

func (o *GetNetworkSwitchAlternateManagementInterfaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkSwitchAlternateManagementInterfaceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSwitchAlternateManagementInterfaceOKBody get network switch alternate management interface o k body
swagger:model GetNetworkSwitchAlternateManagementInterfaceOKBody
*/
type GetNetworkSwitchAlternateManagementInterfaceOKBody struct {

	// Boolean value to enable or disable AMI configuration. If enabled, VLAN and protocols must be set
	Enabled bool `json:"enabled,omitempty"`

	// Can be one or more of the following values: 'radius', 'snmp' or 'syslog'
	Protocols []string `json:"protocols"`

	// Array of switch serial number and IP assignment. If parameter is present, it cannot have empty body. Note: switches parameter is not applicable for template networks, in other words, do not put 'switches' in the body when updating template networks. Also, an empty 'switches' array will remove all previous assignments
	Switches []*GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0 `json:"switches"`

	// Alternate management VLAN, must be between 1 and 4094
	VlanID int64 `json:"vlanId,omitempty"`
}

// Validate validates this get network switch alternate management interface o k body
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSwitches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchAlternateManagementInterfaceOKBody) validateSwitches(formats strfmt.Registry) error {
	if swag.IsZero(o.Switches) { // not required
		return nil
	}

	for i := 0; i < len(o.Switches); i++ {
		if swag.IsZero(o.Switches[i]) { // not required
			continue
		}

		if o.Switches[i] != nil {
			if err := o.Switches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSwitchAlternateManagementInterfaceOK" + "." + "switches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSwitchAlternateManagementInterfaceOK" + "." + "switches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network switch alternate management interface o k body based on the context it is used
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSwitches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchAlternateManagementInterfaceOKBody) contextValidateSwitches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Switches); i++ {

		if o.Switches[i] != nil {

			if swag.IsZero(o.Switches[i]) { // not required
				return nil
			}

			if err := o.Switches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSwitchAlternateManagementInterfaceOK" + "." + "switches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSwitchAlternateManagementInterfaceOK" + "." + "switches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAlternateManagementInterfaceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0 get network switch alternate management interface o k body switches items0
swagger:model GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0
*/
type GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0 struct {

	// Switch alternative management IP. To remove a prior IP setting, provide an empty string
	AlternateManagementIP string `json:"alternateManagementIp,omitempty"`

	// Switch gateway must be in IP format. Only and must be specified for Polaris switches
	Gateway string `json:"gateway,omitempty"`

	// Switch serial number
	Serial string `json:"serial,omitempty"`

	// Switch subnet mask must be in IP format. Only and must be specified for Polaris switches
	SubnetMask string `json:"subnetMask,omitempty"`
}

// Validate validates this get network switch alternate management interface o k body switches items0
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch alternate management interface o k body switches items0 based on context it is used
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAlternateManagementInterfaceOKBodySwitchesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
